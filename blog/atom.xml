<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ks6088ts.github.io/blog</id>
    <title>ks6088ts Blog</title>
    <updated>2023-03-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ks6088ts.github.io/blog"/>
    <subtitle>ks6088ts Blog</subtitle>
    <icon>https://ks6088ts.github.io/https://github.com/ks6088ts.png</icon>
    <entry>
        <title type="html"><![CDATA[Azure Developer CLI による開発プロセスの高速化]]></title>
        <id>https://ks6088ts.github.io/blog/azure-developer-cli-get-started</id>
        <link href="https://ks6088ts.github.io/blog/azure-developer-cli-get-started"/>
        <updated>2023-03-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[実際に Azure Developer CLI を使ってみて良かった点や、参考となるサイトについて纏めます。]]></summary>
        <content type="html"><![CDATA[<p>実際に Azure Developer CLI を使ってみて良かった点や、参考となるサイトについて纏めます。</p><h1>Azure Developer CLI とは</h1><p>Azure Developer CLI (以下、<code>azd</code>) は、Azure 上でクラウドアプリをビルドするプロセスを高速化するオープンソースツールです。<br>
<!-- -->規定のディレクトリ構造をもつテンプレートプロジェクトを指定して、<code>azd</code> コマンドを実行することでテンプレートを Azure 上にデプロイすることができます。<br>
<!-- -->これらのテンプレートは、アプリケーションコード・IaC ファイル(<code>Bicep</code> or <code>Terraform</code>)・プロジェクト構造を記述する <code>azure.yaml</code> ファイルから構成されます。<br>
<!-- -->こちらでは簡単な使い方が紹介されています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VTk-FhJyo7s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe><p><code>azd</code> を使うとテンプレートのアプリケーションを簡単かつ再現性のある形でデプロイすることができます。<br>
<!-- -->やりたいことに近しいプロジェクトのテンプレートを探して、そこから設定変更やソースコードの微修正していくと、開発工数が大幅に削減できます。</p><p><a href="https://github.com/Azure/awesome-azd" target="_blank" rel="noopener noreferrer">Azure/awesome-azd</a>には azd 関連のブログ記事や動画などの情報がまとまっています。<br>
<code>azd</code> 互換なテンプレートは以下のリンクから探せます。</p><ul><li><a href="https://aka.ms/awesome-azd" target="_blank" rel="noopener noreferrer">Awesome AZD Templates Gallery</a>: azd 互換なテンプレートが検索可能なサイト</li><li><a href="https://github.com/topics/azd-templates" target="_blank" rel="noopener noreferrer">Azure Developer CLI templates</a>: GitHub で <code>Azure Developer CLI templates</code> topic がついているもの</li></ul><h1>Azure Developer CLI のハンズオン</h1><p>ハンズオンといってもツールのインストールとコマンドの実行だけなので数分で完結します。<br>
<!-- -->まずは <code>azd</code> をインストールします。<br>
<a href="https://learn.microsoft.com/ja-jp/azure/developer/azure-developer-cli/install-azd?tabs=localinstall%2Cwindows%2Cbrew" target="_blank" rel="noopener noreferrer">Azure Developer CLIをインストールする (プレビュー)</a> を参考に、開発環境の OS に応じたインストール手順を実行し、<code>azd</code> コマンドが通ることを確認してください。<br>
<!-- -->たとえば Linux/macOS の場合は、</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">azd のインストール</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">curl</span><span class="token plain"> -fsSL https://aka.ms/install-azd.sh </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bash</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>でインストールできます。<br>
<!-- -->次に <code>azd</code> コマンドを使って Azure にログインし、認証情報を取得します。<br>
<!-- -->以下のコマンドを実行するとブラウザからログインできます。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Azure にログイン</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ azd login</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Logged </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> to Azure.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>適当なテンプレートを指定して <code>azd</code> で Azure にデプロイします。<br>
<!-- -->ここでは <a href="https://github.com/Azure-Samples/todo-nodejs-mongo-terraform" target="_blank" rel="noopener noreferrer">Azure-Samples/todo-nodejs-mongo-terraform</a> を指定します。<br>
<code>azd up</code> でプロジェクトの初期化、プロビジョニング、デプロイを実行します。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">azd でデプロイ</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ azd up --template todo-nodejs-mongo-terraform</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Initializing a new project </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">azd init</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">✓</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> Done: Initialized </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> repository</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">✓</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> Done: Downloading template code to: </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please enter a new environment name: handson_test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please enter a new environment name: handson_test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> an Azure Subscription to use:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> an Azure location to use:  </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">. </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Asia Pacific</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> Japan East </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">japaneast</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Provisioning Azure resources </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">azd provision</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Provisioning Azure resources can take some </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>--template</code> の指定方法は、<code>Azure-Samples/</code> 配下のサンプルであれば上記のようにレポジトリ名だけで実行できます。<br>
<!-- -->また、<code>https://github.com/Azure-Samples/todo-nodejs-mongo-terraform</code> のように URI をフルで指定する方法もあります。<br>
<!-- -->また、<code>azd up</code> は以下のコマンドを個別に実行することと等価です。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ azd init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ azd provision</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ azd deploy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>公式の <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.azure-dev" target="_blank" rel="noopener noreferrer">VS Code extension</a> もあるので、VS Code 上の操作で <code>azd</code> の各種コマンドを実行することも可能です。</p><h1>何が嬉しいのか</h1><p>今時、真面目に・健全に新規プロジェクト立ち上げようとすると、CI/CD pipeline、dev container、vscode 設定、linter/formatter、IaC などなど、やることが多いと思います。<br>
<!-- -->ほとんどの作業は定型的な作業ではあるので、この辺を丸っと抽象化して適切なデフォルト設定をテンプレート側で与えてくれる点が嬉しいポイントだと思います。</p><p>テンプレートを取っ掛かりにして、必要な変更をソースコードに入れたり、設定値をチューニングするだけでやりたいことに早く近づけます。<br>
<!-- -->今後さらに azd 互換なテンプレートが増えればその勢いは増していきます。</p><p>この手の scaffolding ツールは既に世の中にあって、template repo を fork したり cookiecutter を使うのとほぼ等価ではあるのですが、</p><ul><li>利用者は CLI で完結して作業できる</li><li>テンプレートのディレクトリ階層の規約があるので利用者の認知負荷が低い</li></ul><p>といった点が <code>azd</code> ならではのメリットではないかと思いました。  </p><p>この手のテンプレートは PoC とか特定の目的に閉じた小規模なものだけかと思いきや、<a href="https://github.com/Azure/reliable-web-app-pattern-dotnet" target="_blank" rel="noopener noreferrer">Azure/reliable-web-app-pattern-dotnet</a> のように production grade なテンプレートも開発されていたりします。<br>
<!-- -->Azure ユーザーの生産性を向上させるエコシステムの発展が、より多くのことを少ない手間で実現するための一助になるのではと期待しています。</p><h1>TODO</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azd-互換プロジェクトの作成">azd 互換プロジェクトの作成<a href="#azd-互換プロジェクトの作成" class="hash-link" aria-label="azd 互換プロジェクトの作成 への直接リンク" title="azd 互換プロジェクトの作成 への直接リンク">​</a></h2><p><a href="https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/make-azd-compatible?pivots=azd-create#azd-conventions" target="_blank" rel="noopener noreferrer"><code>azd</code> conventions</a>に従ってプロジェクトを作成します。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azd-に-contribute-する">azd に contribute する<a href="#azd-に-contribute-する" class="hash-link" aria-label="azd に contribute する への直接リンク" title="azd に contribute する への直接リンク">​</a></h2><p>CLI と extension は monorepo 構成で<a href="https://github.com/Azure/azure-dev" target="_blank" rel="noopener noreferrer">Azure/azure-dev</a>にて開発されています。
extension は TypeScript、azd 本体は Go で書かれています。</p>]]></content>
        <author>
            <name>ks6088ts</name>
            <uri>https://github.com/ks6088ts</uri>
        </author>
        <category label="azure" term="azure"/>
        <category label="azd" term="azd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Pages by Docusaurus]]></title>
        <id>https://ks6088ts.github.io/blog/gh-pages-by-docusaurus</id>
        <link href="https://ks6088ts.github.io/blog/gh-pages-by-docusaurus"/>
        <updated>2023-03-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A note for deploying a static site built with docusaurus on GitHub Pages]]></summary>
        <content type="html"><![CDATA[<p>A note for deploying a static site built with docusaurus on GitHub Pages</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get started<a href="#get-started" class="hash-link" aria-label="Get started への直接リンク" title="Get started への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="scaffold-project-website">Scaffold project website<a href="#scaffold-project-website" class="hash-link" aria-label="Scaffold project website への直接リンク" title="Scaffold project website への直接リンク">​</a></h3><ul><li>Reference: <a href="https://docusaurus.io/docs/installation#scaffold-project-website" target="_blank" rel="noopener noreferrer">Docusaurus / Installation / Scaffold project website</a></li></ul><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx create-docusaurus@latest ks6088ts-labs.github.io classic --typescript</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus-configurations">Docusaurus configurations<a href="#docusaurus-configurations" class="hash-link" aria-label="Docusaurus configurations への直接リンク" title="Docusaurus configurations への直接リンク">​</a></h3><ul><li>Reference: <a href="https://docusaurus.io/docs/api/docusaurus-config" target="_blank" rel="noopener noreferrer">docusaurus.config.js</a></li><li>Commit: <a href="https://github.com/ks6088ts/ks6088ts.github.io/commit/c02e76e5f68febeeb6c4cd2df02a0473f762e9fb" target="_blank" rel="noopener noreferrer">update settings for docusaurus</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-to-github-actions-with-github-actions">Deploy to GitHub Actions with GitHub Actions<a href="#deploy-to-github-actions-with-github-actions" class="hash-link" aria-label="Deploy to GitHub Actions with GitHub Actions への直接リンク" title="Deploy to GitHub Actions with GitHub Actions への直接リンク">​</a></h3><ul><li>Reference: <a href="https://docusaurus.io/docs/deployment#triggering-deployment-with-github-actions" target="_blank" rel="noopener noreferrer">Docusaurus / Deployment / Triggering deployment with GitHub Actions</a></li><li>Commit: <a href="https://github.com/ks6088ts/ks6088ts.github.io/commit/f27953ff6b308eb61986d7941f779f0a24fc57ef" target="_blank" rel="noopener noreferrer">add deploy action</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="update-github-settings">Update GitHub Settings<a href="#update-github-settings" class="hash-link" aria-label="Update GitHub Settings への直接リンク" title="Update GitHub Settings への直接リンク">​</a></h3><ul><li><a href="https://github.com/ad-m/github-push-action/issues/96#issuecomment-889984928" target="_blank" rel="noopener noreferrer">remote: Permission to git denied to github-actions[bot]. #96</a></li><li><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site" target="_blank" rel="noopener noreferrer">Configuring a publishing source for your GitHub Pages site</a></li></ul>]]></content>
        <author>
            <name>ks6088ts</name>
            <uri>https://github.com/ks6088ts</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform provider for SORACOM を作って Azure Functions と連携してみた]]></title>
        <id>https://ks6088ts.github.io/blog/terraform-provider-soracom</id>
        <link href="https://ks6088ts.github.io/blog/terraform-provider-soracom"/>
        <updated>2022-12-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Terraform で SORACOM のリソース管理をしたかったので、SORACOM 向けの Terraform カスタムプロバイダを実装してみました。カスタムプロバイダ開発に係る知見や、Terraform provider for SORACOM で SORACOM のリソース管理をしてみた例をご紹介します。]]></summary>
        <content type="html"><![CDATA[<p>Terraform で SORACOM のリソース管理をしたかったので、SORACOM 向けの Terraform カスタムプロバイダを実装してみました。カスタムプロバイダ開発に係る知見や、Terraform provider for SORACOM で SORACOM のリソース管理をしてみた例をご紹介します。  </p><ol><li>Terraform のカスタムプロバイダの概要</li><li>SORACOM 向けカスタムプロバイダの実装</li><li>SORACOM x Azure Functions の利用例</li></ol><p>といった章立てでまとめてみます。</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-terraform-のカスタムプロバイダの概要"><strong>1. Terraform のカスタムプロバイダの概要</strong><a href="#1-terraform-のカスタムプロバイダの概要" class="hash-link" aria-label="1-terraform-のカスタムプロバイダの概要 への直接リンク" title="1-terraform-のカスタムプロバイダの概要 への直接リンク">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-iac-"><strong>Why IaC ?</strong><a href="#why-iac-" class="hash-link" aria-label="why-iac- への直接リンク" title="why-iac- への直接リンク">​</a></h3><p>そもそもなぜ IaC が必要なのか？というところから、私の過去の経験を元に整理してみます。  </p><p>新しいものはたいてい怖いもので、初見では <code>「ウェブコンソールとか CLI ツールで十分でしょ？IaC ツールっていらなくないですか？」</code> といった気持ちでした。<br>
<!-- -->確かに CLI ツールは何かのリソースの操作や状態の確認などの目的で手軽に利用できて便利です。CLI ツールを駆使したシェルスクリプトでも IaC ツールで実施しているようなリソース管理を "技術的には" 実現できるかもしれません。<br>
<!-- -->実際に CLI でリソースの管理をしようとすると、手続き的な処理を書くことになります。リソースの差分チェックや個々の処理のエラーハンドリングなど、実は厳密にやろうとすると考慮することが多くてなかなか大変です。結果、複雑でメンテナンスが困難なスクリプトが出来上がったりします。<br>
<!-- -->とまぁここまで手を動かしてみてようやく重い腰を上げて IaC ツールを触ってみるか、ということになりました。実際に使ってみると、CLI で考慮する必要のあった差分チェックやらエラーハンドリングといった複雑さをツールが丸っと面倒を見てくれるおかげで、望ましいリソースの状態を宣言的に記述してツールに喰わせるだけになるのです。リソース設定を環境の再現性をもたせて移管するといったことも簡単になります。開発者体験が飛躍的に進歩した感じがします。<br>
<!-- -->IaC ツールがこれだけ便利だと、いついかなる時も IaC がしたくなる病に駆られてちょっとした検証とかで IaC するオーバーエンジニアリングをした時期もありました。<a href="https://www.google.com/search?q=Typescript%E4%BE%9D%E5%AD%98%E3%81%AE%E6%82%AA%E5%BE%AA%E7%92%B0&amp;sxsrf=ALiCzsbbYTvTMh39om3QUsgRGj7nvS3Z4w:1668426679347&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwj7iLncza37AhVZmFYBHe94BKoQ_AUoAXoECBkQAw&amp;biw=1080&amp;bih=1724&amp;dpr=1" target="_blank" rel="noopener noreferrer">TypeScript依存の悪循環</a> を想起しますね。<br>
<!-- -->IaC 化するにも作業コストがかかるので、<code>他者と協業する</code>とか<code>構築するシステムが大規模・複雑</code>になってきたときに、IaC を検討するとバランスが良いかと思います。</p><ul><li>CLI はあくまでワンショットのタスクの実行といった <code>動的な操作</code> を支援するツール</li><li>IaC ツールはリソースの構築といった<code>静的な操作</code>を支援するツール</li></ul><p>という認識を持って、用法容量を守って正しく使い分けるのが良さそうです。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="terraform-って何"><strong>Terraform って何？</strong><a href="#terraform-って何" class="hash-link" aria-label="terraform-って何 への直接リンク" title="terraform-って何 への直接リンク">​</a></h3><p>IaC ツールとしてカテゴライズされるソフトウェアとしては、<a href="https://aws.amazon.com/jp/cdk/" target="_blank" rel="noopener noreferrer">AWS CDK</a>・<a href="https://www.terraform.io/" target="_blank" rel="noopener noreferrer">Terraform</a>・<a href="https://learn.microsoft.com/ja-jp/azure/azure-resource-manager/bicep/overview?tabs=bicep" target="_blank" rel="noopener noreferrer">Bicep</a> などがあります。<br>
<!-- -->中でも Terraform は、カスタムプロバイダと呼ばれる pluggable なインタフェースが存在していて、カスタムプロバイダを実装しさえすれば API を公開している Web サービスに対してリソースのプロビジョニングが可能になります。<br>
<!-- -->AWS, Azure, GCP などのクラウドサービスはもちろんのこと、既に数多くのカスタムプロバイダが <a href="https://registry.terraform.io/" target="_blank" rel="noopener noreferrer">Terraform Registry</a> に公開されています。使いたいサービス向けのプロバイダが無いか検索してみると面白いです。</p><hr><h3 class="anchor anchorWithStickyNavbar_LWe7" id="カスタムプロバイダの開発に役立つ資料"><strong>カスタムプロバイダの開発に役立つ資料</strong><a href="#カスタムプロバイダの開発に役立つ資料" class="hash-link" aria-label="カスタムプロバイダの開発に役立つ資料 への直接リンク" title="カスタムプロバイダの開発に役立つ資料 への直接リンク">​</a></h3><p>カスタムプロバイダの実装に関して、私が読んで参考になった資料を紹介します。  </p><ul><li><strong><a href="https://developer.hashicorp.com/terraform/intro" target="_blank" rel="noopener noreferrer">HashiCorp / What is Terraform?</a></strong><ul><li>まずは一次情報にあたるのが賢明です。HashiCorp 公式の情報はかなり整理されていて読みやすいです。</li></ul></li><li><strong><a href="https://developer.hashicorp.com/terraform/tutorials/providers" target="_blank" rel="noopener noreferrer">Call APIs with Custom SDK Providers</a></strong><ul><li>とりあえず作ってみて<code>完全に理解した</code>状態になるためには、こちらのチュートリアルを一周するのがおすすめです。カスタムプロバイダの実装から、Terraform Registry に公開までキャッチアップできます。リリースパイプラインを GitHub Actions で構築する手順なんかも再利用性が高くて秀逸です。  </li></ul></li><li><strong><a href="https://amzn.to/3fPfHuW" target="_blank" rel="noopener noreferrer">エキスパートたちのGo言語</a></strong><ul><li>これまで全部英語の文献を紹介しましたが、「いやいや、日本語が良いんだけど...」という方もご安心を。<code>エキスパートたちのGo言語: 3.5 Custom Terraform Provider によるプロビジョニングの自動化</code> にもカスタムプロバイダの作り方が書いてあります。</li></ul></li></ul><hr><p>ここまで記事を一通り読めば、「カスタムプロバイダなんとなく実装できそう」な状態になります。いざ開発を進めてみると、</p><ul><li>具体的にどんな単位で責務を分割してパッケージに落とし込むか</li><li>CI/CD などのパイプラインってどう構築したらいいのだろうか</li></ul><p>といった悩みが出てくるケースもあるかと思います。そんな時は既存のカスタムプロバイダの実装の中に答えがあります。例えば <a href="https://github.com/hashicorp/terraform-provider-aws" target="_blank" rel="noopener noreferrer">hashicorp/terraform-provider-aws</a> では、</p><ul><li><code>internal/conns</code> 以下でクライアントオブジェクト周りを集約</li><li><code>internal/service</code> 配下に各種リソースをハンドルするパッケージを配置</li></ul><p>といった構成になっています。「authentication 周りは conns パッケージに集約する」とか「service パッケージ以下でサービスの追加機能を横に拡張していく」といった参考になる設計が多々ありました。どんな形であれ設計レベルで暗黙の前提が決まっていると実装方法が一意になり、開発の生産性を上げてくれるので予め決めておくとよいと思います。</p><p>CI/CD については、上で言及した HashiCorp さんのチュートリアル記事 <a href="https://developer.hashicorp.com/terraform/tutorials/providers/provider-release-publish" target="_blank" rel="noopener noreferrer">Release and Publish a Provider to the Terraform Registry</a> に、<code>Git tag を打つと GitHub Actions で release ジョブが回って Terraform Registry に自動的に公開される</code> パイプラインの記述があり非常に参考になりました。最終的に Terraform Registry への公開も想定すると、いろんなプラットフォーム向けにバイナリを生成する必要が出てきます。いちいち温かみのある手作業をしていると日が暮れてしまいますので、<a href="https://github.com/goreleaser/goreleaser-action" target="_blank" rel="noopener noreferrer">goreleaser/goreleaser-action</a> を活用してリリースパイプラインを GitHub Actions で構築しておくと良いです。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="api-クライアントを作る"><strong>API クライアントを作る</strong><a href="#api-クライアントを作る" class="hash-link" aria-label="api-クライアントを作る への直接リンク" title="api-クライアントを作る への直接リンク">​</a></h3><p>既存のカスタムプロバイダの実装をいくつか見るとわかることですが、カスタムプロバイダの実装には原則的に API コールのための実装詳細は含まれていません。いずれも API クライアントライブラリ or SDK に実装詳細を抱え込んでもらって、provider はそれを利用するアプリケーションとしての構成になっています。<br>
<!-- -->Terraform plugin がどのように動作するのかの概略図は以下の通りです。HashiCorp 社の資料でもクライアントライブラリとして切り離す設計を推奨しています。  </p><p><img loading="lazy" src="https://content.hashicorp.com/api/assets?product=tutorials&amp;version=main&amp;asset=public%2Fimg%2Fterraform%2Fproviders%2Fcore-plugins-api.png" alt="Overview" class="img_ev3q"></p><p>!!! tip
Tip: We recommend Terraform plugins consume an external API client library, as shown in the diagram above. If one doesn't exist, you should create one. This is aligned with modern coding practices of keeping software projects modular.<br>
<!-- -->出典: <a href="https://developer.hashicorp.com/terraform/tutorials/configuration-language/provider-use?in=terraform%2Fconfiguration-language&amp;utm_offer=ARTICLE_PAGE#terraform-plugins" target="_blank" rel="noopener noreferrer">Perform CRUD Operations with Providers / Terraform plugins</a></p><p>なお、HashiCorp 提供の plugin ライブラリが Go で書かれているので、クライアントライブラリの言語も Go がよいです。</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-soracom-向けカスタムプロバイダの実装"><strong>2. SORACOM 向けカスタムプロバイダの実装</strong><a href="#2-soracom-向けカスタムプロバイダの実装" class="hash-link" aria-label="2-soracom-向けカスタムプロバイダの実装 への直接リンク" title="2-soracom-向けカスタムプロバイダの実装 への直接リンク">​</a></h2><p>SORACOM は SORACOM Funk, SORACOM Funnel といった各種クラウドプロバイダと簡単に接続するアプリケーションサービスを提供しています。SORACOM が Terraform 対応するとこれまで手動でやっていた諸々の連携設定作業をすべて Terraform で完結できるようになって便利なのでは？と妄想が膨らみ、今回 SORACOM 向けにカスタムプロバイダを開発するに至りました。</p><p>カスタムプロバイダ本体は Terraform Registry の <a href="https://registry.terraform.io/providers/ks6088ts/soracom/latest" target="_blank" rel="noopener noreferrer">ks6088ts/soracom</a> に公開済ですのですぐに触れる状態です。2022/12月時点で 1000 回近くダウンロードされているようです。まだまだ工事中なポイントが多々ありまして、機能が足りてなかったりドキュメントが手薄だったりしているので contribution は大歓迎です。<br>
<!-- -->基本的には <a href="https://github.com/ks6088ts/terraform-provider-soracom/tree/main/examples" target="_blank" rel="noopener noreferrer">examples</a> を実行していただくと雰囲気がつかめるはずです。<br>
<!-- -->SORACOM 向けの Terraform Provider の実装作業として、大きく 2 つのソフトウェア開発をしました。</p><ul><li>Step 1. API クライアントライブラリ <a href="https://github.com/ks6088ts/soracom-sdk-go" target="_blank" rel="noopener noreferrer">ks6088ts/soracom-sdk-go</a> の開発</li><li>Step 2. カスタムプロバイダ本体 <a href="https://github.com/ks6088ts/terraform-provider-soracom" target="_blank" rel="noopener noreferrer">ks6088ts/terraform-provider-soracom</a> の開発</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-api-クライアントライブラリの開発"><strong>Step 1. API クライアントライブラリの開発</strong><a href="#step-1-api-クライアントライブラリの開発" class="hash-link" aria-label="step-1-api-クライアントライブラリの開発 への直接リンク" title="step-1-api-クライアントライブラリの開発 への直接リンク">​</a></h3><p>OpenAPI v3 に対応した <a href="https://users.soracom.io/ja-jp/tools/api/reference/" target="_blank" rel="noopener noreferrer">SORACOM API リファレンス</a> が公開されていますので、このスキーマファイルから機械的に Go のクライアントライブラリを生成してみましょう。<br>
<!-- -->たった 2 steps です。</p><p>1．スキーマファイル <a href="https://users.soracom.io/swagger/soracom-api.ja.yaml" target="_blank" rel="noopener noreferrer">soracom-api.ja.yaml</a> をダウンロードして、<code>specs/api.yaml</code> に置きます。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">curl</span><span class="token plain"> -sSfL https://users.soracom.io/swagger/soracom-api.ja.yaml --output specs/api.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>2．<a href="https://openapi-generator.tech/" target="_blank" rel="noopener noreferrer">OpenAPI Generator</a> を使って 1 でダウンロードした仕様書から下記コマンドを実行しクライアントライブラリを生成します。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx @openapitools/openapi-generator-cli generate </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --input-spec specs/api.yaml </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --generator-name go </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --output generated/api </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --package-name api </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --git-host github.com </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --git-user-id ks6088ts </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --git-repo-id soracom-sdk-go </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        --http-user-agent ks6088ts/soracom-sdk-go/0.0.3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>コマンドラインオプションを見ていただくと、結構柔軟に所望の設定を注入することが出来ます。<br>
<!-- -->ここでは user agent やパッケージ名を好みの設定にしてコード生成しています。<br>
<code>generated/api</code> 以下に *.go ファイルが生成されれば成功です。ここで生成されたライブラリは <a href="https://github.com/ks6088ts/soracom-sdk-go" target="_blank" rel="noopener noreferrer">ks6088ts/soracom-sdk-go</a> で公開しています。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="github-actions-を使ってクライアントライブラリの-ci-をまわしてみる">GitHub Actions を使ってクライアントライブラリの CI をまわしてみる<a href="#github-actions-を使ってクライアントライブラリの-ci-をまわしてみる" class="hash-link" aria-label="GitHub Actions を使ってクライアントライブラリの CI をまわしてみる への直接リンク" title="GitHub Actions を使ってクライアントライブラリの CI をまわしてみる への直接リンク">​</a></h4><p>自動生成したクライアントライブラリは割とすぐ使えましたが、念のためライブラリの単体テストもしておきます。私は commit をトリガーとして、クライアントライブラリの E2E テストを GitHub Actions で実行するようにしています。</p><p>自動生成したライブラリを使って CI インフラ上で API コールするテストを実施するためには、認証情報(SORACOM でいうと auth key, auth key id)を渡す必要があります。認証キーは当然秘匿する必要がありますので、GitHub の Encrypted secrets を利用します。手順は <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets" target="_blank" rel="noopener noreferrer">GitHub Docs / Encrypted secrets</a> に書かれています。GitHub 側の設定が終われば、以下のような形で参照するだけです。
<code>.github/workflows/</code> に <a href="https://github.com/ks6088ts/soracom-sdk-go/blob/main/.github/workflows/test.yml" target="_blank" rel="noopener noreferrer">test.yml</a> を置くだけで CI が回ります。便利な世の中になったものですね。</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.github/workflows/test.yml</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 一部を抜粋</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Run CI test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> make ci</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">test GOPATH=/home/runner/go</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">env</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">SORACOM_AUTH_KEY</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.SORACOM_AUTH_KEY </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">SORACOM_AUTH_KEY_ID</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.SORACOM_AUTH_KEY_ID </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">COVERAGE_TYPE</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.COVERAGE_TYPE </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="テスト用の-soracom-認証キーの権限は最小に">テスト用の SORACOM 認証キーの権限は最小に<a href="#テスト用の-soracom-認証キーの権限は最小に" class="hash-link" aria-label="テスト用の SORACOM 認証キーの権限は最小に への直接リンク" title="テスト用の SORACOM 認証キーの権限は最小に への直接リンク">​</a></h4><p>SORACOM では SAM ユーザというリソースに対して API の実行権限を制御したキーを払いだすことができます。SAM ユーザの権限設定方法は <a href="https://users.soracom.io/ja-jp/docs/sam/permission/#" target="_blank" rel="noopener noreferrer">SORACOM User ドキュメント / 権限設定のためのパーミッション構文</a>を参照ください。<br>
<!-- -->セキュリティリスクを最小限にするためにも権限は必要最低限のものにします。実リソースに対する細かい操作を CI で実行することに懸念がある場合は、検証を目的として使える <a href="https://users.soracom.io/ja-jp/tools/api-sandbox/" target="_blank" rel="noopener noreferrer">SORACOM API Sandbox</a> を使ってもよいかもしれません。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-カスタムプロバイダ本体の開発"><strong>Step 2. カスタムプロバイダ本体の開発</strong><a href="#step-2-カスタムプロバイダ本体の開発" class="hash-link" aria-label="step-2-カスタムプロバイダ本体の開発 への直接リンク" title="step-2-カスタムプロバイダ本体の開発 への直接リンク">​</a></h3><p>まずは、ユーザが触る HCL の外部仕様を設計することから開発を始めます。<br>
<!-- -->基本的には、対象となるクラウドプロバイダの API そのものと一対一対応させたスキーマを定義することが多いです。ただ、場合によってはカスタムプロバイダの外部仕様として露出すべきではないパラメータがある場合があります。のちの使い勝手や後方互換性担保のことを考えて、利用者観点で不要なものは削除して必要十分なインタフェースになるまでダイエットさせると小回りが利く仕様に収束すると思います。  </p><p>外部仕様の設計をしていく中で、<strong>依存関係にある複数のリソースの関係をどう表現するか</strong> というところも少し悩みました。<br>
<!-- -->例えばリソース A とリソース B が依存関係にあることを表現するにはどうすればよいか？といった点です。<br>
<!-- -->実はこの手の悩みも既に解決されていて、クラウドサービスの世界でよく見かける「リソース A をリソース B にアタッチするリソース C」を新たに定義することが多いようです。プロビジョニング対象のウェブサービスには C というリソースの物理的な実体はないのですが、カスタムプロバイダの外部仕様においてのみ存在する仮想的なリソース C を定義することで、A と B が直接依存関係を持たないようにするのです。<br>
<code>e.g. aws_internet_gateway_attachment, azurerm_virtual_machine_data_disk_attachment</code></p><p>ドキュメントに関しては、<a href="https://github.com/hashicorp/terraform-plugin-docs" target="_blank" rel="noopener noreferrer">tfplugindocs</a> を使うとカスタムプロバイダの Go のコードからドキュメントが生成され、<strong>コードとドキュメントが同期</strong> されます。<br>
<!-- -->ドキュメントの更新は忘れがちなので、CI 上でドキュメント生成して commit 済みのドキュメントと diff を取るなどして、仕組みでヒューマンエラーを撲滅するアクションを採ると精神衛生上良いです。私は CI パイプラインの中に <a href="https://github.com/ks6088ts/terraform-provider-soracom/blob/main/terraform.mk#L26" target="_blank" rel="noopener noreferrer">docs-diff</a> コマンドにあるような形で、CI 上でドキュメント生成処理を実行したあと git diff を実行して更新忘れを検知するようにしてみました。</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-soracom-funk-x-azure-functions-の利用例"><strong>3. SORACOM Funk x Azure Functions の利用例</strong><a href="#3-soracom-funk-x-azure-functions-の利用例" class="hash-link" aria-label="3-soracom-funk-x-azure-functions-の利用例 への直接リンク" title="3-soracom-funk-x-azure-functions-の利用例 への直接リンク">​</a></h2><p>最後に、SORACOM Funk と Azure Functions の連携を Terraform で構築したサンプルを紹介します。サンプルコードは <a href="https://github.com/ks6088ts/terraform-provider-soracom/tree/main/examples/group_configuration_funk_azure_functions_python" target="_blank" rel="noopener noreferrer">group_configuration_funk_azure_functions_python</a> にあります。<br>
<!-- -->構成図は以下の通りです。</p><p><img loading="lazy" alt="group_configuration_funk_azure_functions_python" src="/assets/images/group_configuration_funk_azure_functions_python-6829a8af601072972e5dcbf5abab3d1e.svg" width="1000" height="640" class="img_ev3q"></p><p>実行にはSORACOM の認証情報のセットアップと、Azure の認証情報のセットアップが必要になります。アカウントのセットアップやリソースの設定などは各社ユーザサイトを参照してください。</p><ul><li><a href="https://users.soracom.io/ja-jp/tools/cli/getting-started/#%E3%82%B9%E3%83%86%E3%83%83%E3%83%97-2-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%82%92%E6%BA%96%E5%82%99%E3%81%99%E3%82%8B" target="_blank" rel="noopener noreferrer">SORACOM CLI をインストールする / ステップ 2: 認証情報を準備する</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/developer/terraform/authenticate-to-azure?tabs=bash" target="_blank" rel="noopener noreferrer">Azure に対して Terraform を認証する</a></li></ul><p>以下の操作でインフラリソースが構築/削除ができます。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># サンプルコードの取得</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone git@github.com:ks6088ts/terraform-provider-soracom.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> terraform-provider-soracom/examples/group_configuration_funk_azure_functions_python</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># リソースの構築</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">terraform apply</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># リソースの削除</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">terraform destroy -auto-approve</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="azure-のリソース">Azure のリソース<a href="#azure-のリソース" class="hash-link" aria-label="Azure のリソース への直接リンク" title="Azure のリソース への直接リンク">​</a></h3><ul><li>リソースグループ</li><li>ストレージアカウント</li><li>サービスプラン</li><li>関数アプリ</li></ul><p>を生成します。サンプルコードは以下の通りです。</p><div class="language-tf codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">azure.tf</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tf codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">provider "azurerm" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  features {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "azurerm_resource_group" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name     = "${var.azure_prefix}-rg"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  location = var.azure_resource_location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "azurerm_storage_account" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                     = "${var.azure_prefix}storageacct"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  resource_group_name      = azurerm_resource_group.example.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  location                 = azurerm_resource_group.example.location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  account_tier             = "Standard"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  account_replication_type = "LRS"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "azurerm_service_plan" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                = "${var.azure_prefix}-sp"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  location            = azurerm_resource_group.example.location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  resource_group_name = azurerm_resource_group.example.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  os_type             = "Linux"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  sku_name            = "S1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "azurerm_linux_function_app" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                = "${var.azure_prefix}exampleapp"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  location            = azurerm_resource_group.example.location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  resource_group_name = azurerm_resource_group.example.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  service_plan_id     = azurerm_service_plan.example.id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  storage_account_name       = azurerm_storage_account.example.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  storage_account_access_key = azurerm_storage_account.example.primary_access_key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  site_config {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    application_stack {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      python_version = "3.9"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "azurerm_function_app_function" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name            = "example-python-function"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function_app_id = azurerm_linux_function_app.example.id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  language        = "Python"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  file {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name    = "__init__.py"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    content = file("./app/__init__.py")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test_data = jsonencode({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "name" = "Azure"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  config_json = jsonencode({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "scriptFile" = "__init__.py"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "bindings" = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "authLevel" = "function"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "direction" = "in"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "methods" = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "get",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "post",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "name" = "req"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "type" = "httpTrigger"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "direction" = "out"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "name"      = "$return"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "type"      = "http"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data "azurerm_function_app_host_keys" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                = "${var.azure_prefix}exampleapp"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  resource_group_name = azurerm_resource_group.example.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # https://github.com/hashicorp/terraform-provider-azurerm/issues/9869</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  depends_on = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    azurerm_linux_function_app.example</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="soracom-のリソース">SORACOM のリソース<a href="#soracom-のリソース" class="hash-link" aria-label="SORACOM のリソース への直接リンク" title="SORACOM のリソース への直接リンク">​</a></h3><ul><li>SIM グループ</li><li>認証情報</li><li>SORACOM Funk の設定</li></ul><p>を生成します。認証情報と SORACOM Funk の設定には、上述した Azure 側のリソース設定を反映させて連携します。</p><div class="language-tf codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">soracom.tf</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tf codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">terraform {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  required_providers {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    soracom = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      source = "ks6088ts/soracom"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">provider "soracom" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  profile = var.soracom_profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "soracom_group" "group" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tags = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name = var.soracom_group_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "soracom_credentials" "credentials" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  credentials_id = var.credentials_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  description    = "API Token credentials via terraform-provider-soracom"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type           = "api-token-credentials"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  credentials = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Azure Functions の設定を参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    token = data.azurerm_function_app_host_keys.example.default_function_key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "soracom_group_configuration_funk" "group_configuration_funk" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  group_id       = soracom_group.group.id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  enabled        = true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  credentials_id = soracom_credentials.credentials.credentials_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  content_type   = "json"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # Azure Functions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  destination {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    provider     = "azure"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    service      = "function-app"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # Azure Functions の呼び出し URL を参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    resource_url = azurerm_function_app_function.example.invocation_url</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上でサンプルの紹介は終了です。</p><p>これまでは Azure のリソースを作成してパラメータ設定を確認したあと、SORACOM 側の認証情報と SORACOM Funk の SIM グループの設定をウェブコンソールか SORACOM CLI で指定する必要がありました。Terraform 対応することで、そういった手作業も無くなり <code>terraform apply -auto-approve</code> すればサクッと Azure・SORACOM 双方を連携したリソースが生成できます。後片付けも <code>terraform destroy</code> でさっと終わります。より一層 SORACOM を便利に使うことができるようになりました。</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ポエム-ツール開発からの学び"><strong>ポエム: ツール開発からの学び</strong><a href="#ポエム-ツール開発からの学び" class="hash-link" aria-label="ポエム-ツール開発からの学び への直接リンク" title="ポエム-ツール開発からの学び への直接リンク">​</a></h2><p>この手のツールを開発してみて、改めて感じたことをポエム的に 2 点書き留めておきます。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-サンプルコードから書き始めること"><strong>1. サンプルコードから書き始めること</strong><a href="#1-サンプルコードから書き始めること" class="hash-link" aria-label="1-サンプルコードから書き始めること への直接リンク" title="1-サンプルコードから書き始めること への直接リンク">​</a></h3><p>今回実装したカスタムプロバイダや、API・SDK といった、プラットフォームを形成するためのソフトウェアに関して、一番注意を払うべきポイントは外部仕様であると思います。細かな内部実装上のバグなんかは都度直せますが、外部仕様は一度出すとクライアントに影響が出るため、容易に変更しづらいことが理由です。<br>
<!-- -->「なに当たり前のことを言っているんだ？」と思われる方もいらっしゃるかもしれません。しかしながら、依存する他のコンポーネントの仕様や内部実装上の制約などに気が向いてしまうと、それらに無意識的に引きずられてしまい最終的にユーザに提供する外部仕様がぎこちなくなることって意外と多くないでしょうか。カプセル化が不十分で不要なパラメータを晒したり、リソース間に不要な依存が発生していたり、直観的ではない操作を要求したり、、、少なくとも私はそういう失敗を何度もしました。こういった問題を踏んでは、<a href="https://amzn.to/3GgZt8x" target="_blank" rel="noopener noreferrer">C++のためのAPIデザイン</a> の <code>第2章 優れたAPIの特徴</code> に事細かに書いてある原理原則を何回も読み返したりしていました。</p><p>これまでの経験の中の学びの一つに、<strong>サンプルから書き始める(⇔外部仕様を先に策定する)</strong> ことがあります。これは常日頃意識するようにしています。<br>
<!-- -->サンプルコードから書き始めると、嫌でもユーザの利便性や後方互換性の考慮を最初にすることになります。実装上の制約といったノイズを排除して考えることもできます。仕様のちゃぶ台返しがあっても、内部実装に着手する前なら手戻りは少なくて済みます。最初にサンプルを書いておけば、後々ユーザから「サンプルください」なんてことも言われません。メリットのほうが多いのです。<br>
<!-- -->外部仕様の検討は、真面目にやると意外に時間がかかります。動作するコードとしての成果物がなかなか出てこない分、プログラマとしては焦燥感に駆られて実装に着手してしまうのも往々にしてあると思います。<br>
<!-- -->「意識しましょう」という努力目標のルールは大抵機能しないことが多いので、内部実装を始めるより前に API のレビューや(動作しない状態の)サンプルコードのレビューを必須とする開発フローを取り入れるのも、組織の規模や提供するソフトウェアの特性によってはフィットするのかもしれません。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-自分以外の視点で良いフィードバックをくれる人を見つけること"><strong>2. 自分以外の視点で良いフィードバックをくれる人を見つけること</strong><a href="#2-自分以外の視点で良いフィードバックをくれる人を見つけること" class="hash-link" aria-label="2-自分以外の視点で良いフィードバックをくれる人を見つけること への直接リンク" title="2-自分以外の視点で良いフィードバックをくれる人を見つけること への直接リンク">​</a></h3><p>個人開発をしていると、目線が一つだけになり結果的に良いものができないのを思い知りました。ある程度品質や方向性が固まった段階で、早期にできるだけいろんな人に dogfooding をお願いして、率直でストレートな意見をもらうことは非常に大事であると思いました。<br>
<!-- -->特に、知識豊富なヘビーユーザーや事前知識がそこまでないライトユーザーなど、様々な人にお願いすると面白いです。前者はセキュリティ上の懸念点を見つけてくださいましたし、後者は「サンプルみれば理解できるでしょ？」みたいなマッチョな思想がイケてないことを教えてくれたりと、他者からのフィードバックで多くの気づきと改善ができました。<br>
<!-- -->今回開発したカスタムプロバイダもそうした人達との協業を通して改善していった経緯もあります。改めてこの場を借りて感謝申し上げます。</p><p>(完)</p>]]></content>
        <author>
            <name>ks6088ts</name>
            <uri>https://github.com/ks6088ts</uri>
        </author>
        <category label="terraform" term="terraform"/>
        <category label="azure" term="azure"/>
    </entry>
</feed>